package com.nephew.jk.utils;

public class OperativeSymbolUtil {


    /***
     * 异或 ^ 详解
     * 将数转换为二进制之后运算，然后不相同的结果就为1；  0^0=0  1^0=1  0^1=1  1^1=0
     * 例子：4的二进制为  0000 0000 0000 0100
     * 5的二进制为  0000 0000 0000 0110
     * 4^5的二级制为  0000 0000 0000 0010 转换为十进制为2
     * 凡叔解释：设符号前值为a，符号后值为b。a>b=a-b;a<b=a+b
     */
    private static void a() {
        int a = 3;
        int b = 4;

        a = a ^ b;
        b = b ^ a;//b=b^(a^b) 		->b=a
        a = a ^ b;//a=(a^b)^(b^a)	->a=b
        System.out.println(a);//输出4
        System.out.println(b);//输出3
    }

    /***
     * 左移运算符 << ：符号位不变，低位补0；
     * 右移运算符 >> ：是低位溢出，符号位不变，并用符号位补溢出高位
     * 无符号右移运算符>>>:低位溢出，高位补0，注意，无符号右移（>>>）
     * 中的符号位（最高位）也跟着变，无符号的意思是将符号位当作数字位看待。
     */
    private static void b() {
        int a =  4;
        System.out.println(a << 2);
        /*   0000 0000 0000 0100  a的二进制
         * 000000 0000 0001 0000   低位补两个0
         *   0000 0000 0001 0000  高位溢出，所以a<<2=8
         * */

        System.out.println(a >> 2);
        /*	0000 0000 0000 0100
         *  0000 0000 0000 000100  符号位补高位
         *  0000 0000 0000 0001   低位溢出  所以 a>>2=1
         * */

        int b = -1;
        System.out.println(b >>> 1);
        /*  1111 1111 1111 1111
         *  0111 1111 1111 11111 右移一位，高位补0，
         *  0111 1111 1111 1111  低位溢出 结果为 2147483647
         * */
    }

    public static void main(String[] args) {
        //a();
        b();
    }

}
